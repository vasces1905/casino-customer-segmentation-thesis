-- verify_working_data.sql - Check with CORRECT queries

-- 1. BASIC CHECK - Get recent successful records
SELECT 
    customer_id,
    cluster_label,
    avg_session_from_metadata,
    segment_data IS NOT NULL as has_segment,
    LENGTH(segment_data::text) as segment_data_length,
    created_at
FROM casino_data.kmeans_segments 
WHERE period_id = '2022-H1'
AND created_at >= '2025-07-21 10:29:16'  -- After your latest run
ORDER BY created_at DESC 
LIMIT 10;

-- 2. SEGMENT DISTRIBUTION - Should show diversity now
SELECT 
    cluster_label,
    COUNT(*) as customer_count,
    CAST(AVG(avg_session_from_metadata) AS NUMERIC(10,2)) as avg_session,
    CAST(MIN(avg_session_from_metadata) AS NUMERIC(10,2)) as min_session,
    CAST(MAX(avg_session_from_metadata) AS NUMERIC(10,2)) as max_session
FROM casino_data.kmeans_segments 
WHERE period_id = '2022-H1'
AND created_at >= '2025-07-21 10:29:16'
AND avg_session_from_metadata IS NOT NULL
GROUP BY cluster_label
ORDER BY customer_count DESC;

-- 3. JSON DATA INSPECTION - Check actual segment_data content
SELECT 
    customer_id,
    cluster_label,
    avg_session_from_metadata,
    segment_data->>'business_label' as segment_business_label,
    segment_data->>'size' as segment_size,
    segment_data->>'percentage' as segment_percentage,
    segment_data->>'avg_total_wagered' as avg_wagered
FROM casino_data.kmeans_segments 
WHERE period_id = '2022-H1'
AND created_at >= '2025-07-21 10:29:16'
AND segment_data IS NOT NULL
LIMIT 10;

-- 4. METADATA INSPECTION - Check model_metadata content  
SELECT 
    customer_id,
    cluster_label,
    model_metadata->>'silhouette_score' as silhouette,
    model_metadata->>'n_samples' as n_samples,
    model_metadata->>'model_type' as model_type,
    model_metadata->>'created_by' as created_by
FROM casino_data.kmeans_segments 
WHERE period_id = '2022-H1'
AND created_at >= '2025-07-21 10:29:16'
AND model_metadata IS NOT NULL
LIMIT 5;

-- 5. FULL SUCCESS VERIFICATION
SELECT 
    'SUCCESS METRICS' as check_type,
    COUNT(*) as total_records,
    COUNT(CASE WHEN avg_session_from_metadata IS NOT NULL THEN 1 END) as with_avg_session,
    COUNT(CASE WHEN segment_data IS NOT NULL THEN 1 END) as with_segment_data,
    COUNT(CASE WHEN model_metadata IS NOT NULL THEN 1 END) as with_metadata,
    COUNT(DISTINCT cluster_label) as unique_segments,
    CAST(AVG(avg_session_from_metadata) AS NUMERIC(10,2)) as overall_avg_session
FROM casino_data.kmeans_segments 
WHERE period_id = '2022-H1'
AND created_at >= '2025-07-21 10:29:16';
