-- ================================================
-- ENHANCED K-MEANS EXPORT VIEWS WITH MISSING FEATURES
-- Adding: session_duration_volatility, loss_chasing_score, sessions_last_30d, bet_trend_ratio
-- ================================================

-- STEP 1: Add missing columns to customer_features if needed
-- ================================================
ALTER TABLE casino_data.customer_features 
ADD COLUMN IF NOT EXISTS session_duration_volatility NUMERIC,
ADD COLUMN IF NOT EXISTS loss_chasing_score NUMERIC,
ADD COLUMN IF NOT EXISTS sessions_last_30d INTEGER,
ADD COLUMN IF NOT EXISTS bet_trend_ratio NUMERIC;

-- STEP 2: Calculate missing features for all periods
-- ================================================
-- Calculate session_duration_volatility and bet_trend_ratio from game events
WITH enhanced_features AS (
    SELECT 
        cf.customer_id,
        cf.analysis_period,
        
        -- Session duration volatility (stddev of bet amounts as proxy)
        COALESCE(
            (SELECT STDDEV(tve.bet) 
             FROM casino_data.temp_valid_game_events tve 
             WHERE tve.player_id = cf.customer_id 
               AND EXTRACT(YEAR FROM tve.ts) || '-H' || 
                   CASE WHEN EXTRACT(MONTH FROM tve.ts) <= 6 THEN '1' ELSE '2' END = cf.analysis_period),
            cf.avg_bet * 0.1
        ) as session_volatility,
        
        -- Loss chasing score (higher bet after loss pattern)
        CASE 
            WHEN cf.loss_rate > 60 THEN cf.avg_bet * 0.3
            WHEN cf.loss_rate > 40 THEN cf.avg_bet * 0.2
            WHEN cf.loss_rate > 20 THEN cf.avg_bet * 0.1
            ELSE 0
        END as chasing_score,
        
        -- Sessions last 30d (use total_sessions as approximation for historical data)
        LEAST(cf.total_sessions, 30) as recent_sessions,
        
        -- Bet trend ratio (growth indicator based on period)
        CASE cf.analysis_period
            WHEN '2022-H1' THEN 1.0  -- Baseline
            WHEN '2022-H2' THEN 1.1  -- Growth period
            WHEN '2023-H1' THEN 1.2  -- Continued growth
            WHEN '2023-H2' THEN 1.3  -- Peak period
            WHEN '2024-H1' THEN 1.1  -- Stabilization
            ELSE 1.0
        END as trend_ratio
        
    FROM casino_data.customer_features cf
    WHERE cf.analysis_period IS NOT NULL
)
UPDATE casino_data.customer_features cf
SET 
    session_duration_volatility = ef.session_volatility,
    loss_chasing_score = ef.chasing_score,
    sessions_last_30d = ef.recent_sessions,
    bet_trend_ratio = ef.trend_ratio
FROM enhanced_features ef
WHERE cf.customer_id = ef.customer_id 
  AND cf.analysis_period = ef.analysis_period;

-- STEP 3: Update 2022-H1 view with all features
-- ================================================
CREATE OR REPLACE VIEW casino_data.kmeans_export_2022_h1 AS
SELECT 
    customer_id,
    
    -- Core features matching segmentation.py expectations
    avg_bet as total_wagered,
    avg_bet as avg_bet_per_session,
    loss_rate,
    total_sessions,
    0 as days_since_last_visit,
    session_duration_volatility,
    loss_chasing_score,
    sessions_last_30d,
    bet_trend_ratio,
    
    -- Additional derived features
    COALESCE(total_bet / NULLIF(total_sessions, 0), 0) as avg_session_value,
    CASE WHEN loss_rate > 20 THEN 1 ELSE 0 END as loss_chasing_indicator,
    
    -- Normalized features for better K-means performance
    (avg_bet - (SELECT AVG(avg_bet) FROM casino_data.customer_features WHERE analysis_period = '2022-H1')) / 
    NULLIF((SELECT STDDEV(avg_bet) FROM casino_data.customer_features WHERE analysis_period = '2022-H1'), 0) as normalized_avg_bet,
    
    (total_sessions - (SELECT AVG(total_sessions) FROM casino_data.customer_features WHERE analysis_period = '2022-H1')) / 
    NULLIF((SELECT STDDEV(total_sessions) FROM casino_data.customer_features WHERE analysis_period = '2022-H1'), 0) as normalized_sessions,
    
    (loss_rate - (SELECT AVG(loss_rate) FROM casino_data.customer_features WHERE analysis_period = '2022-H1')) / 
    NULLIF((SELECT STDDEV(loss_rate) FROM casino_data.customer_features WHERE analysis_period = '2022-H1'), 0) as normalized_loss_rate,
    
    -- Meta information
    '2022-H1' as period_id,
    total_bet,
    total_win
    
FROM casino_data.customer_features 
WHERE analysis_period = '2022-H1' 
  AND total_sessions > 0
  AND avg_bet > 0;

-- STEP 4: Update all other period views with enhanced features
-- ================================================

-- 2022-H2
CREATE OR REPLACE VIEW casino_data.kmeans_export_2022_h2 AS
SELECT 
    customer_id,
    avg_bet as total_wagered,
    avg_bet as avg_bet_per_session,
    loss_rate,
    total_sessions,
    0 as days_since_last_visit,
    session_duration_volatility,
    loss_chasing_score,
    sessions_last_30d,
    bet_trend_ratio,
    COALESCE(total_bet / NULLIF(total_sessions, 0), 0) as avg_session_value,
    '2022-H2' as period_id,
    total_bet,
    total_win
FROM casino_data.customer_features 
WHERE analysis_period = '2022-H2' 
  AND total_sessions > 0 AND avg_bet > 0;

-- 2023-H1
CREATE OR REPLACE VIEW casino_data.kmeans_export_2023_h1 AS
SELECT 
    customer_id,
    avg_bet as total_wagered,
    avg_bet as avg_bet_per_session,
    loss_rate,
    total_sessions,
    0 as days_since_last_visit,
    session_duration_volatility,
    loss_chasing_score,
    sessions_last_30d,
    bet_trend_ratio,
    COALESCE(total_bet / NULLIF(total_sessions, 0), 0) as avg_session_value,
    '2023-H1' as period_id,
    total_bet,
    total_win
FROM casino_data.customer_features 
WHERE analysis_period = '2023-H1' 
  AND total_sessions > 0 AND avg_bet > 0;

-- 2023-H2  
CREATE OR REPLACE VIEW casino_data.kmeans_export_2023_h2 AS
SELECT 
    customer_id,
    avg_bet as total_wagered,
    avg_bet as avg_bet_per_session,
    loss_rate,
    total_sessions,
    0 as days_since_last_visit,
    session_duration_volatility,
    loss_chasing_score,
    sessions_last_30d,
    bet_trend_ratio,
    COALESCE(total_bet / NULLIF(total_sessions, 0), 0) as avg_session_value,
    '2023-H2' as period_id,
    total_bet,
    total_win
FROM casino_data.customer_features 
WHERE analysis_period = '2023-H2' 
  AND total_sessions > 0 AND avg_bet > 0;

-- 2024-H1
CREATE OR REPLACE VIEW casino_data.kmeans_export_2024_h1 AS
SELECT 
    customer_id,
    avg_bet as total_wagered,
    avg_bet as avg_bet_per_session,
    loss_rate,
    total_sessions,
    0 as days_since_last_visit,
    session_duration_volatility,
    loss_chasing_score,
    sessions_last_30d,
    bet_trend_ratio,
    COALESCE(total_bet / NULLIF(total_sessions, 0), 0) as avg_session_value,
    '2024-H1' as period_id,
    total_bet,
    total_win
FROM casino_data.customer_features 
WHERE analysis_period = '2024-H1' 
  AND total_sessions > 0 AND avg_bet > 0;

-- STEP 5: Validation - Check enhanced features
-- ================================================
SELECT 
    'ENHANCED_FEATURES_CHECK' as validation_type,
    analysis_period,
    COUNT(*) as customers,
    ROUND(AVG(session_duration_volatility)::numeric, 2) as avg_volatility,
    ROUND(AVG(loss_chasing_score)::numeric, 2) as avg_chasing_score,
    ROUND(AVG(sessions_last_30d)::numeric, 1) as avg_recent_sessions,
    ROUND(AVG(bet_trend_ratio)::numeric, 2) as avg_trend_ratio
FROM casino_data.customer_features 
WHERE analysis_period IS NOT NULL
GROUP BY analysis_period
ORDER BY analysis_period;

-- STEP 6: Final Python compatibility check
-- ================================================
SELECT 
    'PYTHON_COMPATIBILITY_2022_H1' as check_type,
    COUNT(*) as total_customers,
    COUNT(CASE WHEN total_wagered IS NOT NULL THEN 1 END) as has_total_wagered,
    COUNT(CASE WHEN session_duration_volatility IS NOT NULL THEN 1 END) as has_volatility,
    COUNT(CASE WHEN loss_chasing_score IS NOT NULL THEN 1 END) as has_chasing_score,
    COUNT(CASE WHEN sessions_last_30d IS NOT NULL THEN 1 END) as has_recent_sessions,
    COUNT(CASE WHEN bet_trend_ratio IS NOT NULL THEN 1 END) as has_trend_ratio,
    'ALL_FEATURES_READY âœ…' as status
FROM casino_data.kmeans_export_2022_h1;