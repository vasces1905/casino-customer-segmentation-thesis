"""
Quick Database Schema Check
Find exact table and column names for real analysis
"""

import psycopg2

DB_CONFIG = {
    'host': 'localhost',
    'database': 'casino_research',
    'user': 'researcher',
    'password': 'academic_password_2024'
}

def schema_check():
    """Quick schema exploration."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("DATABASE SCHEMA CHECK")
        print("=" * 30)
        
        # 1. All tables
        cursor.execute("""
            SELECT table_name, 
                   (SELECT COUNT(*) FROM information_schema.columns 
                    WHERE table_name = t.table_name) as column_count
            FROM information_schema.tables t
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        tables_info = cursor.fetchall()
        print("All Tables:")
        for table_name, col_count in tables_info:
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            row_count = cursor.fetchone()[0]
            print(f"  {table_name}: {row_count:,} rows, {col_count} columns")
        
        # 2. Demographic table details
        print(f"\nCUSTOMER_DEMOGRAPHICS Details:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'customer_demographics'
            ORDER BY ordinal_position
        """)
        
        demo_columns = cursor.fetchall()
        for col_name, data_type, nullable in demo_columns:
            print(f"  {col_name} ({data_type}) - {nullable}")
        
        # Sample demographic data with schema prefix
        print(f"\nSample demographic data:")
        try:
            cursor.execute("SELECT * FROM casino_data.customer_demographics LIMIT 3")
            demo_sample = cursor.fetchall()
            for row in demo_sample:
                print(f"  {row}")
        except Exception as e:
            print(f"  Error accessing customer_demographics: {e}")
            # Try without schema
            try:
                cursor.execute("SELECT * FROM customer_demographics LIMIT 3")
                demo_sample = cursor.fetchall()
                for row in demo_sample:
                    print(f"  {row}")
            except Exception as e2:
                print(f"  Error without schema: {e2}")
        
        # 3. Check for player/betting related tables
        print(f"\nLooking for player/betting tables...")
        betting_tables = []
        for table_name, _ in tables_info:
            if any(keyword in table_name.lower() for keyword in 
                   ['player', 'bet', 'game', 'profile', 'vip']):
                betting_tables.append(table_name)
        
        if betting_tables:
            print("Potential betting/player tables:")
            for table in betting_tables:
                print(f"  - {table}")
                
                # Show columns for betting tables
                cursor.execute(f"""
                    SELECT column_name, data_type
                    FROM information_schema.columns 
                    WHERE table_name = '{table}'
                    ORDER BY ordinal_position
                """)
                
                columns = cursor.fetchall()
                print(f"    Columns:")
                for col_name, col_type in columns[:10]:  # First 10 columns
                    print(f"      â€¢ {col_name} ({col_type})")
                
                if len(columns) > 10:
                    print(f"      ... and {len(columns)-10} more columns")
                print()
        
        # 4. Check promo_label table with schema prefix
        print(f"PROMO_LABEL Details:")
        try:
            cursor.execute("""
                SELECT column_name, data_type
                FROM information_schema.columns 
                WHERE table_name = 'promo_label'
                ORDER BY ordinal_position
            """)
            
            promo_columns = cursor.fetchall()
            print("Columns:")
            for col_name, data_type in promo_columns:
                print(f"  {col_name} ({data_type})")
            
            # Sample promo data with schema prefix
            try:
                cursor.execute("SELECT * FROM casino_data.promo_label LIMIT 3")
                promo_sample = cursor.fetchall()
                print(f"\nSample promo data:")
                for row in promo_sample:
                    print(f"  {row}")
            except Exception as e:
                print(f"  Error with schema prefix: {e}")
                # Try without schema
                cursor.execute("SELECT * FROM promo_label LIMIT 3")
                promo_sample = cursor.fetchall()
                print(f"\nSample promo data:")
                for row in promo_sample:
                    print(f"  {row}")
                
        except Exception as e:
            print(f"promo_label table issue: {e}")
        
        # 5. Look for join possibilities with schema prefix
        print(f"\nJOIN POSSIBILITIES:")
        print("Tables with customer_id:")
        
        for table_name, _ in tables_info:
            try:
                cursor.execute(f"""
                    SELECT COUNT(*) 
                    FROM information_schema.columns 
                    WHERE table_name = '{table_name}' 
                    AND column_name = 'customer_id'
                """)
                
                has_customer_id = cursor.fetchone()[0] > 0
                if has_customer_id:
                    # Try with schema prefix first
                    try:
                        cursor.execute(f"SELECT COUNT(DISTINCT customer_id) FROM casino_data.{table_name}")
                        unique_customers = cursor.fetchone()[0]
                        print(f"  casino_data.{table_name}: {unique_customers:,} unique customers")
                    except:
                        # Fallback to without schema
                        cursor.execute(f"SELECT COUNT(DISTINCT customer_id) FROM {table_name}")
                        unique_customers = cursor.fetchone()[0]
                        print(f"  {table_name}: {unique_customers:,} unique customers")
                    
            except Exception:
                continue
        
        conn.close()
        return tables_info, demo_columns, betting_tables
        
    except Exception as e:
        print(f"Schema check failed: {e}")
        return None

if __name__ == "__main__":
    result = schema_check()
    if result:
        print(f"\nSCHEMA CHECK COMPLETED!")
        print("Now we know exactly what data is available for analysis")